/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SetupEquipment.java
 *
 * Created on 24 Mei 12, 3:18:10
 */

package com.kmn.gui.setup;

import com.kmn.MainApps;
import com.kmn.MainView;
import com.kmn.controller.Confirm;
import com.kmn.controller.props.EquipmentDetailProperties;
import com.kmn.controller.props.EquipmentProperties;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.application.Action;

/**
 *
 * @author Hermanto
 */
public class SetupEquipment extends javax.swing.JDialog implements Confirm {
    private SetupEquipmentDetail detailBox;
    private EquipmentProperties propEuipment = new EquipmentProperties(this);
    
        /** Creates new form SetupEquipment */
    public SetupEquipment(MainView mainview, boolean modal) {
        super(MainApps.getApplication().getMainFrame(), modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonAdd = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();
        buttonRemove = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        iconEquipment = new javax.swing.JLabel();
        labelEquipment = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelEquipment = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.kmn.MainApps.class).getContext().getResourceMap(SetupEquipment.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.kmn.MainApps.class).getContext().getActionMap(SetupEquipment.class, this);
        buttonAdd.setAction(actionMap.get("newDetail")); // NOI18N
        buttonAdd.setIcon(resourceMap.getIcon("buttonAdd.icon")); // NOI18N
        buttonAdd.setText(resourceMap.getString("buttonAdd.text")); // NOI18N
        buttonAdd.setName("buttonAdd"); // NOI18N

        buttonEdit.setAction(actionMap.get("editDetail")); // NOI18N
        buttonEdit.setIcon(resourceMap.getIcon("buttonEdit.icon")); // NOI18N
        buttonEdit.setText(resourceMap.getString("buttonEdit.text")); // NOI18N
        buttonEdit.setName("buttonEdit"); // NOI18N

        buttonRemove.setAction(actionMap.get("removeDetail")); // NOI18N
        buttonRemove.setIcon(resourceMap.getIcon("buttonRemove.icon")); // NOI18N
        buttonRemove.setText(resourceMap.getString("buttonRemove.text")); // NOI18N
        buttonRemove.setName("buttonRemove"); // NOI18N

        buttonCancel.setAction(actionMap.get("closeSetupEquipment")); // NOI18N
        buttonCancel.setIcon(resourceMap.getIcon("buttonCancel.icon")); // NOI18N
        buttonCancel.setText(resourceMap.getString("buttonCancel.text")); // NOI18N
        buttonCancel.setName("buttonCancel"); // NOI18N

        buttonSave.setAction(actionMap.get("saveEquipment")); // NOI18N
        buttonSave.setIcon(resourceMap.getIcon("buttonSave.icon")); // NOI18N
        buttonSave.setText(resourceMap.getString("buttonSave.text")); // NOI18N
        buttonSave.setName("buttonSave"); // NOI18N

        iconEquipment.setIcon(resourceMap.getIcon("iconEquipment.icon")); // NOI18N
        iconEquipment.setText(resourceMap.getString("iconEquipment.text")); // NOI18N
        iconEquipment.setName("iconEquipment"); // NOI18N

        labelEquipment.setFont(resourceMap.getFont("labelEquipment.font")); // NOI18N
        labelEquipment.setText(resourceMap.getString("labelEquipment.text")); // NOI18N
        labelEquipment.setName("labelEquipment"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tabelEquipment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Type", "Com", "Bound Rate", "IP", "Port"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelEquipment.setName("tabelEquipment"); // NOI18N
        jScrollPane1.setViewportView(tabelEquipment);
        tabelEquipment.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("tabelEquipment.columnModel.title0")); // NOI18N
        tabelEquipment.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("tabelEquipment.columnModel.title1")); // NOI18N
        tabelEquipment.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("tabelEquipment.columnModel.title2")); // NOI18N
        tabelEquipment.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("tabelEquipment.columnModel.title3")); // NOI18N
        tabelEquipment.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("tabelEquipment.columnModel.title4")); // NOI18N
        tabelEquipment.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("tabelEquipment.columnModel.title5")); // NOI18N
        tabelEquipment.getColumnModel().getColumn(6).setHeaderValue(resourceMap.getString("tabelEquipment.columnModel.title6")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iconEquipment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelEquipment))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .addComponent(buttonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(19, 19, 19))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(450, Short.MAX_VALUE)
                .addComponent(buttonSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonCancel)
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(iconEquipment)
                    .addComponent(labelEquipment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonRemove)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSave)
                    .addComponent(buttonCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        propEuipment.load();
        this.loadRow();
    }//GEN-LAST:event_formWindowOpened

    private void addRow(EquipmentDetailProperties detail) {
        DefaultTableModel model = (DefaultTableModel) tabelEquipment.getModel();
        model.addRow(new Object[]{
            (String) detail.getCode(),
            detail.getName(),
            detail.getType(),
            detail.getCom(),
            detail.getRate(),
            detail.getIp(),
            detail.getPort()
        });
    }

    private void editRow(EquipmentDetailProperties detail) {
        int idx = tabelEquipment.getSelectedRow();
        
        DefaultTableModel model = (DefaultTableModel) tabelEquipment.getModel();
        model.setValueAt((String) detail.getCode(), idx, 0);
        model.setValueAt(detail.getName(), idx, 1);
        model.setValueAt(detail.getType(), idx, 2);
        model.setValueAt(detail.getCom(), idx, 3);
        model.setValueAt(detail.getRate(), idx, 4);
        model.setValueAt(detail.getIp(), idx, 5);
        model.setValueAt(detail.getPort(), idx, 6);
    }

    private void loadRow() {
        DefaultTableModel model = (DefaultTableModel) tabelEquipment.getModel();
        List<EquipmentDetailProperties> listEquip = propEuipment.getListDetailEquipment();
            for(EquipmentDetailProperties equip : listEquip) {
                model.addRow(new Object[]{
                (String) equip.getCode(),
                equip.getName(),
                equip.getType(),
                equip.getCom(),
                equip.getRate(),
                equip.getIp(),
                equip.getPort()
            });
        }
    }

    @Action
    public void closeSetupEquipment() {
        setVisible(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonRemove;
    private javax.swing.JButton buttonSave;
    private javax.swing.JLabel iconEquipment;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelEquipment;
    private javax.swing.JTable tabelEquipment;
    // End of variables declaration//GEN-END:variables


    //@Override
    public void onSuccess() {
        setVisible(false);
    }

    //@Override
    public void onWarning(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    //@Override
    public void onError(Throwable t) {
        JOptionPane.showMessageDialog(this, t.getMessage());
    }

    @Action
    public void newDetail() {
        JFrame mainFrame = MainApps.getApplication().getMainFrame();
        if (detailBox == null) {
            detailBox = new SetupEquipmentDetail(this, true, this);
            detailBox.setLocationRelativeTo(this);
        }

        EquipmentDetailProperties detail = new EquipmentDetailProperties();
        detailBox.setDetail(detail);
        MainApps.getApplication().show(detailBox);
    }

    @Action
    public void editDetail() {
        int idx = tabelEquipment.getSelectedRow();

        if(idx < 0) return;

        JFrame mainFrame = MainApps.getApplication().getMainFrame();
        if (detailBox == null) {
            detailBox = new SetupEquipmentDetail(this, true, this);
            detailBox.setLocationRelativeTo(this);
        }

        DefaultTableModel model = (DefaultTableModel) tabelEquipment.getModel();
        EquipmentDetailProperties detail = propEuipment.getDetalProperies((String) model.getValueAt(idx, 0));
        detailBox.setDetail(detail);
        MainApps.getApplication().show(detailBox);
    }

    public String addDetail(EquipmentDetailProperties detail) {
        String mssg = "SAVE";

        List<EquipmentDetailProperties> listEquipment =  propEuipment.getListDetailEquipment();
        for(EquipmentDetailProperties propEquip : listEquipment) {
            if(propEquip.getCode().equals(detail.getCode())) {
                mssg = "Equipment Code Already exist";
                break;
            }
        }

        if(mssg.equals("SAVE")) {
            listEquipment.add(detail);
            this.addRow(detail);
        }
        
        return mssg;
    }

    public String editDetail(EquipmentDetailProperties detail) {
        String mssg = "SAVE";

        List<EquipmentDetailProperties> listEquipment =  propEuipment.getListDetailEquipment();
        for(EquipmentDetailProperties propEquip : listEquipment) {
            if(propEquip.equals(detail)) propEquip = detail;
        }
        this.editRow(detail);

        return mssg;
    }

    @Action
    public void removeDetail() {
        DefaultTableModel model = (DefaultTableModel) tabelEquipment.getModel();
        int[] idx = tabelEquipment.getSelectedRows();
        int count = tabelEquipment.getRowCount();
        List<String> lcode = new ArrayList<String>();
        
        int z=0;
        for(int i=count; i>=0; i--) {
            for(int x : idx)
                if(i == x) {
                    lcode.add((String) model.getValueAt(x, 0));
                    model.removeRow(i);
                    z++;
                }
        }

        List<EquipmentDetailProperties> listEquipment = propEuipment.getListDetailEquipment();
        EquipmentDetailProperties equipProp;
        for(int i=listEquipment.size(); i>0; i--) {
            equipProp = listEquipment.get(i-1);

            for(String l : lcode) {
                if(l.equals(equipProp.getCode())) {
                    listEquipment.remove(equipProp);
                    break;
                }
            }
        }
    }

    @Action
    public void saveEquipment() {
        propEuipment.store();
        setVisible(false);

        int confirm = JOptionPane.showConfirmDialog(this,
                "You must restart application for the changes to take effect", "Restart", 2);
        if(confirm == 0) MainApps.getApplication().close();
    }
}
